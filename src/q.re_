/*
   Rationals.
   This file is part of the Zarith library
   http://forge.ocamlcore.org/projects/zarith .
   It is distributed under LGPL 2 licensing, with static linking exception.
   See the LICENSE file included in the distribution.
   Copyright (c) 2010-2011 Antoine Min , Abstraction project.
   Abstraction is part of the LIENS (Laboratoire d'Informatique de l'ENS),
   a joint laboratory by:
   CNRS (Centre national de la recherche scientifique, France),
   ENS ( cole normale sup rieure, Paris, France),
   INRIA Rocquencourt (Institut national de recherche en informatique, France).
 */
type t =
  {
    num: int, /* Numerator. */
    den: int /* Denominator, >= 0 */
  } /* make */ /* creation */ /* -------- */; /* Type of rationals.
     Invariants:
     - den is always >= 0;
     - num and den have no common factor;
     - if den=0, then num is -1, 0 or 1.
     - if num=0, then den is -1, 0 or 1.
   */

let mk n d => {num: n, den: d}; /* make and normalize n/d, assuming d > 0 */

let make_real n d =>
  if (n === 0 || d === 1) {
    mk n 1
  } else {
    let g = Z.gcd n d;
    if (g === 1) {
      mk n d
    } else {
      mk (n / g) (d / g)
    }
  }; /* make and normalize any fraction */

let make n d => {
  let sd = Z.sign d;
  if (sd == 0) {
    mk (Z.of_int (Z.sign n)) 0
  } else if (sd > 0) {
    make_real n d
  } else {
    make_real (Z.neg n) (Z.neg d)
  }
};

let of_int n => mk n 1; /* n/1 */

let of_ints n d => make n d;

let zero = of_int 0; /* 0/1 */

let one = of_int 1; /* 1/1 */

let minus_one = of_int (-1); /* -1/1 */

let inf = mk 1 0; /* 1/0 */

let minus_inf = mk (-1) 0; /* -1/0 */

let undef = mk 0 0; /* 0/0 */

/*let of_float d =>
  if (d == infinity) {
    inf
  } else if (d == neg_infinity) {
    minus_inf
  } else if (
    classify_float d == FP_nan
  ) {
    undef
  } else {
    let (m, e) = frexp d; /* put into the form m * 2^e, where m is an integer */
    let (m, e) = (Z.of_float (ldexp m 53), e - 53);
    if (e >= 0) {
      of_int (Z.shift_left m e)
    } else {
      make_real m (Z.shift_left 1 (- e))
    }
  };*/
/*
 let of_string s =>
   try {
     let i = String.index s '/';
     make
       (Z.of_substring s pos::0 len::i)
       (Z.of_substring s pos::(i + 1) len::(String.length s - i - 1))
   } {
   | Not_found =>
     if (s == "inf" || s == "+inf") {
       inf
     } else if (s == "-inf") {
       minus_inf
     } else if (s == "undef") {
       undef
     } else {
       of_int (int_of_string s)
     }
   } /* ------- */; /* queries */
   */
type kind =
  | ZERO /* 0 */
  | INF /* 1/0 */
  | MINF /* -1/0 */
  | UNDEF /* 0/0 */
  | NZERO; /* non-special, non-0 */

let classify n =>
  if (n.den === 0) {
    switch (Z.sign n.num) {
    | 1 => INF
    | (-1) => MINF
    | _ => UNDEF
    }
  } else if (
    n.num === 0
  ) {
    ZERO
  } else {
    NZERO
  };

let is_real n => n.den !== 0;

let num x => x.num;

let den x => x.den;

let sign x => Z.sign x.num; /* sign undef = 0
     sign inf = 1
     sign -inf = -1
  */

let equal x y => Z.equal x.num y.num && Z.equal x.den y.den;

let compare x y =>
  switch (classify x, classify y) {
  | (UNDEF, UNDEF)
  | (INF, INF)
  | (MINF, MINF) => 0
  | (UNDEF, _) => (-1)
  | (_, UNDEF) => 1
  | (MINF, _)
  | (_, INF) => (-1)
  | (INF, _)
  | (_, MINF) => 1
  | _ =>
    if (x.den === y.den) {
      /* implies equality,
         especially if immediate value and not a pointer,
         in particular in the case den = 1 */
      Z.compare x.num y.num
    } else {
      Z.compare (Z.mul x.num y.den) (Z.mul y.num x.den)
    }
  };

let min a b =>
  if (compare a b <= 0) {
    a
  } else {
    b
  };

let max a b =>
  if (compare a b >= 0) {
    a
  } else {
    b
  };

let leq a b => compare a b <= 0;

let geq a b => compare a b >= 0;

let lt a b => compare a b < 0;

let gt a b => compare a b > 0;

let to_string n =>
  switch (classify n) {
  | UNDEF => "undef"
  | INF => "+inf"
  | MINF => "-inf"
  | ZERO => "0"
  | NZERO =>
    if (Z.equal n.den 1) {
      into_string n.num
    } else {
      into_string n.num ^ "/" ^ into_string n.den
    }
  };

let to_int x => x.num / x.den; /* raises a Division by zero in case x is undefined or infinity */

/*
 let to_float x =>
   switch (classify x) {
   | ZERO => 0.0
   | INF => infinity
   | MINF => neg_infinity
   | UNDEF => nan
   | NZERO =>
     let p = x.num
     and q = x.den;
     let np = Z.numbits p
     and nq = Z.numbits q;
     if (np <= 53 && nq <= 53) {
       /* p and q convert to floats exactly; use FP division to get the
          correctly-rounded result. */
       Int64.to_float (into_int64 p)
       /. Int64.to_float (into_int64 q)
     } else {
       /* |p| is in [2^(np-1), 2^np)
          q is in [2^(nq-1), 2^nq)
          hence |p/q| is in (2^(np-nq-1), 2^(np-nq+1)).
          We define n such that |p/q*2^n| is in [2^54, 2^56).
          >= 2^54 so that the round to odd technique applies.
          < 2^56 so that the integral part is representable as an int64. */
       let n = 55 - (np - nq); /* Scaling p/q by 2^n */
       let (p', q') =
         if (n >= 0) {
           (Z.shift_left p n, q)
         } else {
           (p, Z.shift_left q (- n))
         }; /* Euclidean division of p' by q' */
       let (quo, rem) = Z.ediv_rem p' q' /* Round quo to float */; /* quo is the integral part of p/q*2^n
            rem/q' is the fractional part. */
       let f = Z.round_to_float quo (Z.sign rem == 0); /* Apply exponent */
       ldexp f (- n)
     }
   } /* ---------- */; /* operations */
   */
let neg x => mk (- x.num) x.den; /* neg undef = undef
     neg inf = -inf
     neg -inf = inf
   */

let abs x =>
  mk (abs x.num) x.den /* addition or substraction (zaors) of finite numbers */; /* abs undef = undef
     abs inf = abs -inf = inf
   */

/*
 let aors zaors x y =>
   if (x.den === y.den) {
     /* implies equality,
        especially if immediate value and not a pointer,
        in particular in the case den = 1 */
     make_real (zaors x.num y.num) x.den
   } else {
     make_real (zaors (Z.mul x.num y.den) (Z.mul y.num x.den)) (Z.mul x.den y.den)
   };
   */
let add x y =>
  if (x.den === 0 || y.den === 0) {
    switch (classify x, classify y) {
    | (ZERO, _) => y
    | (_, ZERO) => x
    | (UNDEF, _)
    | (_, UNDEF) => undef
    | (INF, MINF)
    | (MINF, INF) => undef
    | (INF, _)
    | (_, INF) => inf
    | (MINF, _)
    | (_, MINF) => minus_inf
    | (NZERO, NZERO) => failwith "impossible case"
    }
  } else {
    aors Z.add x y
  }; /* undef + x = x + undef = undef
     inf + -inf = -inf + inf = undef
     inf + x = x + inf = inf
     -inf + x = x + -inf = -inf
   */

let sub x y =>
  if (x.den === 0 || y.den === 0) {
    switch (classify x, classify y) {
    | (ZERO, _) => neg y
    | (_, ZERO) => x
    | (UNDEF, _)
    | (_, UNDEF) => undef
    | (INF, INF)
    | (MINF, MINF) => undef
    | (INF, _)
    | (_, MINF) => inf
    | (MINF, _)
    | (_, INF) => minus_inf
    | (NZERO, NZERO) => failwith "impossible case"
    }
  } else {
    aors Z.sub x y
  }; /* sub x y = add x (neg y) */

let mul x y =>
  if (x.den === 0 || y.den === 0) {
    mk (Z.of_int (Z.sign x.num * Z.sign y.num)) 0
  } else {
    make_real (Z.mul x.num y.num) (Z.mul x.den y.den)
  }; /* undef * x = x * undef = undef
     0 * inf = inf * 0 = 0 * -inf = -inf * 0 = undef
     inf * x = x * inf = sign x * inf
     -inf * x = x * -inf = - sign x * inf
  */

let inv x =>
  switch (Z.sign x.num) {
  | 1 => mk x.den x.num
  | (-1) => mk (Z.neg x.den) (Z.neg x.num)
  | _ =>
    if (x.den === 0) {
      undef
    } else {
      inf
    }
  }; /* 1 / undef = undef
     1 / inf = 1 / -inf = 0
     1 / 0 = inf
     note that: inv (inv -inf) = inf <> -inf
   */

let div x y =>
  if (Z.sign y.num >= 0) {
    mul x (mk y.den y.num)
  } else {
    mul x (mk (Z.neg y.den) (Z.neg y.num))
  }; /* undef / x = x / undef = undef
     0 / 0 = undef
     inf / inf = inf / -inf = -inf / inf = -inf / -inf = undef
     0 / inf = 0 / -inf = x / inf = x / -inf = 0
     inf / x = sign x * inf
     -inf / x = - sign x * inf
     inf / 0 = inf
     -inf / 0 = -inf
     x / 0 = sign x * inf
     we have div x y = mul x (inv y)
  */

let print x => print_string (to_string x);

let output chan x => output_string chan (to_string x);

let sprint () x => to_string x;

/*
 let pp_print f x => Format.pp_print_string f (to_string x) /* ---------------- */ /* prefix and infix */;
 */
let (~-) = neg;

let (~+) x => x;

let (+) = add;

let (-) = sub;

let ( * ) = mul;

let (/) = div;

let (~$) = of_int;

let (/\/) = of_ints;

let (/\/\/) = make;